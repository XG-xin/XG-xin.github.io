import { assign, timeStampNow } from '@datadog/browser-core';
import { RecordType } from '../../types';
import { serializeDocument } from './serialize';
import { initObservers } from './observer';
import { IncrementalSource } from './types';
import { MutationController } from './mutationObserver';
import { getVisualViewport, getScrollX, getScrollY, getWindowHeight, getWindowWidth } from './viewports';
export function record(options) {
    var emit = options.emit;
    // runtime checks for user options
    if (!emit) {
        throw new Error('emit function is required');
    }
    var mutationController = new MutationController();
    var takeFullSnapshot = function (timestamp) {
        if (timestamp === void 0) { timestamp = timeStampNow(); }
        mutationController.flush(); // process any pending mutation before taking a full snapshot
        emit({
            data: {
                height: getWindowHeight(),
                href: window.location.href,
                width: getWindowWidth(),
            },
            type: RecordType.Meta,
            timestamp: timestamp,
        });
        emit({
            data: {
                has_focus: document.hasFocus(),
            },
            type: RecordType.Focus,
            timestamp: timestamp,
        });
        emit({
            data: {
                node: serializeDocument(document, options.defaultPrivacyLevel),
                initialOffset: {
                    left: getScrollX(),
                    top: getScrollY(),
                },
            },
            type: RecordType.FullSnapshot,
            timestamp: timestamp,
        });
        if (window.visualViewport) {
            emit({
                data: getVisualViewport(),
                type: RecordType.VisualViewport,
                timestamp: timestamp,
            });
        }
    };
    takeFullSnapshot();
    var stopObservers = initObservers({
        mutationController: mutationController,
        defaultPrivacyLevel: options.defaultPrivacyLevel,
        inputCb: function (v) { return emit(assembleIncrementalSnapshot(IncrementalSource.Input, v)); },
        mediaInteractionCb: function (p) {
            return emit(assembleIncrementalSnapshot(IncrementalSource.MediaInteraction, p));
        },
        mouseInteractionCb: function (d) {
            return emit(assembleIncrementalSnapshot(IncrementalSource.MouseInteraction, d));
        },
        mousemoveCb: function (positions, source) { return emit(assembleIncrementalSnapshot(source, { positions: positions })); },
        mutationCb: function (m) { return emit(assembleIncrementalSnapshot(IncrementalSource.Mutation, m)); },
        scrollCb: function (p) { return emit(assembleIncrementalSnapshot(IncrementalSource.Scroll, p)); },
        styleSheetRuleCb: function (r) { return emit(assembleIncrementalSnapshot(IncrementalSource.StyleSheetRule, r)); },
        viewportResizeCb: function (d) { return emit(assembleIncrementalSnapshot(IncrementalSource.ViewportResize, d)); },
        focusCb: function (data) {
            return emit({
                data: data,
                type: RecordType.Focus,
                timestamp: timeStampNow(),
            });
        },
        visualViewportResizeCb: function (data) {
            emit({
                data: data,
                type: RecordType.VisualViewport,
                timestamp: timeStampNow(),
            });
        },
    });
    return {
        stop: stopObservers,
        takeFullSnapshot: takeFullSnapshot,
        flushMutations: function () { return mutationController.flush(); },
    };
}
function assembleIncrementalSnapshot(source, data) {
    return {
        data: assign({
            source: source,
        }, data),
        type: RecordType.IncrementalSnapshot,
        timestamp: timeStampNow(),
    };
}
//# sourceMappingURL=record.js.map