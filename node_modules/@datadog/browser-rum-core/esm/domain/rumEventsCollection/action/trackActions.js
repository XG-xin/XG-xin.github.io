import { isExperimentalFeatureEnabled, getRelativeTime, ONE_MINUTE, ContextHistory, addEventListener, generateUUID, clocksNow, ONE_SECOND, elapsed, } from '@datadog/browser-core';
import { trackEventCounts } from '../../trackEventCounts';
import { waitIdlePage } from '../../waitIdlePage';
import { getActionNameFromElement } from './getActionNameFromElement';
// Maximum duration for automatic actions
export var AUTO_ACTION_MAX_DURATION = 10 * ONE_SECOND;
export var ACTION_CONTEXT_TIME_OUT_DELAY = 5 * ONE_MINUTE; // arbitrary
export function trackActions(lifeCycle, domMutationObservable, _a) {
    var actionNameAttribute = _a.actionNameAttribute;
    var history = new ContextHistory(ACTION_CONTEXT_TIME_OUT_DELAY);
    lifeCycle.subscribe(8 /* SESSION_RENEWED */, function () {
        history.reset();
    });
    var stopListener = listenEvents(function (event) {
        if (!isExperimentalFeatureEnabled('frustration-signals') && history.find()) {
            // Ignore any new action if another one is already occurring.
            return;
        }
        var name = getActionNameFromElement(event.target, actionNameAttribute);
        if (!name) {
            return;
        }
        var actionController = newAction(lifeCycle, domMutationObservable, "click" /* CLICK */, name, event, function (endTime) {
            historyEntry.close(getRelativeTime(endTime));
        }, function () {
            historyEntry.remove();
        });
        var historyEntry = history.add(actionController, actionController.startClocks.relative);
    }).stop;
    var actionContexts = {
        findActionId: function (startTime) {
            var _a;
            return isExperimentalFeatureEnabled('frustration-signals')
                ? history.findAll(startTime).map(function (controller) { return controller.id; })
                : (_a = history.find(startTime)) === null || _a === void 0 ? void 0 : _a.id;
        },
    };
    return {
        stop: function () {
            history.findAll().forEach(function (actionController) { return actionController.discard(); });
            stopListener();
        },
        actionContexts: actionContexts,
    };
}
function listenEvents(callback) {
    return addEventListener(window, "click" /* CLICK */, function (event) {
        if (event.target instanceof Element) {
            callback(event);
        }
    }, { capture: true });
}
function newAction(lifeCycle, domMutationObservable, type, name, event, onCompleteCallback, onDiscardCallback) {
    var id = generateUUID();
    var startClocks = clocksNow();
    var eventCountsSubscription = trackEventCounts(lifeCycle);
    var stopWaitingIdlePage = waitIdlePage(lifeCycle, domMutationObservable, function (idleEvent) {
        if (idleEvent.hadActivity && startClocks.timeStamp <= idleEvent.end) {
            complete(idleEvent.end);
        }
        else {
            discard();
        }
    }, AUTO_ACTION_MAX_DURATION).stop;
    var viewCreatedSubscription;
    if (!isExperimentalFeatureEnabled('frustration-signals')) {
        // New views trigger the discard of the current pending Action
        viewCreatedSubscription = lifeCycle.subscribe(2 /* VIEW_CREATED */, discard);
    }
    function complete(endTime) {
        cleanup();
        var eventCounts = eventCountsSubscription.eventCounts;
        lifeCycle.notify(1 /* AUTO_ACTION_COMPLETED */, {
            counts: {
                errorCount: eventCounts.errorCount,
                longTaskCount: eventCounts.longTaskCount,
                resourceCount: eventCounts.resourceCount,
            },
            duration: elapsed(startClocks.timeStamp, endTime),
            id: id,
            name: name,
            startClocks: startClocks,
            type: type,
            event: event,
        });
        onCompleteCallback(endTime);
    }
    function discard() {
        cleanup();
        onDiscardCallback();
    }
    function cleanup() {
        stopWaitingIdlePage();
        eventCountsSubscription.stop();
        if (viewCreatedSubscription) {
            viewCreatedSubscription.unsubscribe();
        }
    }
    return {
        discard: discard,
        id: id,
        startClocks: startClocks,
    };
}
//# sourceMappingURL=trackActions.js.map